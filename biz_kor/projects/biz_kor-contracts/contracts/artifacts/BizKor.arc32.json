{
  "hints": {
    "initGlobalKeys()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "createAssetTest()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "optIntoAsset(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "startAssetSell(uint64,uint64,axfer)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "continueAssetSell(axfer)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "buyAsset(pay)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "deleteApplication()void": {
      "call_config": {
        "delete_application": "CALL"
      }
    },
    "createApplication()void": {
      "call_config": {
        "no_op": "CREATE"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "assetAmount": {
          "type": "uint64",
          "key": "assetAmount"
        },
        "assetPrice": {
          "type": "uint64",
          "key": "assetPrice"
        },
        "asset": {
          "type": "uint64",
          "key": "asset"
        },
        "sellPeriodEnd": {
          "type": "uint64",
          "key": "sellPeriodEnd"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 0,
      "num_uints": 4
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "contract": {
    "name": "BizKor",
    "desc": "",
    "methods": [
      {
        "name": "initGlobalKeys",
        "desc": "Init the values of global keys",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "createAssetTest",
        "desc": "For test only, create an asset",
        "args": [],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "optIntoAsset",
        "desc": "Opt in to an asset for the app account",
        "args": [
          {
            "name": "asset",
            "type": "uint64",
            "desc": "Asset to opt into"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "startAssetSell",
        "desc": "Start asset selling period",
        "args": [
          {
            "name": "price",
            "type": "uint64",
            "desc": "asset price in /uAlgos"
          },
          {
            "name": "length",
            "type": "uint64",
            "desc": "selling period length in secs"
          },
          {
            "name": "axfer",
            "type": "axfer",
            "desc": "initial asset transfer to the app account"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "continueAssetSell",
        "desc": "Send assets clawed back to app account",
        "args": [
          {
            "name": "axfer",
            "type": "axfer",
            "desc": "asset transfer to the app account"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "buyAsset",
        "desc": "Buy 1 piece of the asset",
        "args": [
          {
            "name": "payment",
            "type": "pay",
            "desc": "in /uAlgos"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "deleteApplication",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "createApplication",
        "args": [],
        "returns": {
          "type": "void"
        }
      }
    ]
  }
}