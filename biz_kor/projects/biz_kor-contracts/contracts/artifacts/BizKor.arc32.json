{
  "hints": {
    "createApplication()void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "bootstrap(uint64,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getAppCreatorAddress()address": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getAppVersion()string": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getAssetAmountInitial()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getAssetAmount()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getAssetPrice()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getAssetID()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getSellPeriodEnd()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "buyAsset(pay)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "deleteApplication(uint64)void": {
      "call_config": {
        "delete_application": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "appVersion": {
          "type": "bytes",
          "key": "apv"
        },
        "appCreatorAddress": {
          "type": "bytes",
          "key": "apca"
        },
        "assetAmountInitial": {
          "type": "uint64",
          "key": "asa_total"
        },
        "assetAmount": {
          "type": "uint64",
          "key": "asa_amt"
        },
        "assetPrice": {
          "type": "uint64",
          "key": "asa_price"
        },
        "asset": {
          "type": "uint64",
          "key": "asa_id"
        },
        "sellPeriodEnd": {
          "type": "uint64",
          "key": "end"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 2,
      "num_uints": 5
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "contract": {
    "name": "BizKor",
    "desc": "",
    "methods": [
      {
        "name": "createApplication",
        "desc": "Init the values of global keys",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "bootstrap",
        "desc": "boostrap: create ASA, set global key values",
        "args": [
          {
            "name": "assetPrice",
            "type": "uint64",
            "desc": "ASA price in microAlgos"
          },
          {
            "name": "assetAmount",
            "type": "uint64",
            "desc": "ASA inital amount"
          },
          {
            "name": "sellPeriodLength",
            "type": "uint64",
            "desc": "sell period length in secs"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "getAppCreatorAddress",
        "desc": "get app creator address",
        "args": [],
        "returns": {
          "type": "address",
          "desc": "app creator address"
        }
      },
      {
        "name": "getAppVersion",
        "desc": "get app version",
        "args": [],
        "returns": {
          "type": "string",
          "desc": "app version"
        }
      },
      {
        "name": "getAssetAmountInitial",
        "desc": "get asa initial amount",
        "args": [],
        "returns": {
          "type": "uint64",
          "desc": "asa amount minted initially"
        }
      },
      {
        "name": "getAssetAmount",
        "desc": "get asa amount",
        "args": [],
        "returns": {
          "type": "uint64",
          "desc": "sellable asa amount"
        }
      },
      {
        "name": "getAssetPrice",
        "desc": "get asa price",
        "args": [],
        "returns": {
          "type": "uint64",
          "desc": "asa price in Algos"
        }
      },
      {
        "name": "getAssetID",
        "desc": "get asa id",
        "args": [],
        "returns": {
          "type": "uint64",
          "desc": "asa id"
        }
      },
      {
        "name": "getSellPeriodEnd",
        "desc": "get end of sell period",
        "args": [],
        "returns": {
          "type": "uint64",
          "desc": "end of sell period as absolute time in sec, from 01-Jan-1970"
        }
      },
      {
        "name": "buyAsset",
        "desc": "Buy 1 piece of the asset",
        "args": [
          {
            "name": "payment",
            "type": "pay",
            "desc": "Payment in /uAlgos. asset is also passed as param in assets: [Number(asset)], without it \"unavailable asset\" error is got"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "deleteApplication",
        "desc": "Delete app with ABI method",
        "args": [
          {
            "name": "ASAid",
            "type": "uint64",
            "desc": "reference to ASA, (!)"
          }
        ],
        "returns": {
          "type": "void"
        }
      }
    ]
  }
}