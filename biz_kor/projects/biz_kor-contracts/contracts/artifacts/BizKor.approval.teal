#pragma version 10

// This TEAL was generated by TEALScript v0.88.1
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
int 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *call_DeleteApplication *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	err

// createApplication()void
*abi_route_createApplication:
	// execute createApplication()void
	callsub createApplication
	int 1
	return

// createApplication(): void
//
// Init the values of global keys
createApplication:
	proto 0 0

	// contracts/BizKor.algo.ts:44
	// this.appVersion.value = 'v1.2'
	byte 0x617076 // "apv"
	byte 0x000476312e32
	app_global_put

	// contracts/BizKor.algo.ts:45
	// this.appCreatorAddress.value = globals.creatorAddress
	byte 0x61706361 // "apca"
	global CreatorAddress
	app_global_put

	// contracts/BizKor.algo.ts:46
	// this.assetAmountInitial.value = 0
	byte 0x6173615f746f74616c // "asa_total"
	int 0
	app_global_put

	// contracts/BizKor.algo.ts:47
	// this.assetAmount.value = 0
	byte 0x6173615f616d74 // "asa_amt"
	int 0
	app_global_put

	// contracts/BizKor.algo.ts:48
	// this.assetPrice.value = 0
	byte 0x6173615f7072696365 // "asa_price"
	int 0
	app_global_put

	// contracts/BizKor.algo.ts:49
	// this.asset.value = AssetID.zeroIndex
	byte 0x6173615f6964 // "asa_id"
	int 0
	app_global_put

	// contracts/BizKor.algo.ts:50
	// this.sellPeriodEnd.value = 0
	byte 0x656e64 // "end"
	int 0
	app_global_put

	// contracts/BizKor.algo.ts:51
	// this.assetValidityPeriod.value = 0
	byte 0x6173615f76 // "asa_v"
	int 0
	app_global_put
	retsub

// bootstrap(uint64,uint64,uint64,uint64)void
*abi_route_bootstrap:
	// assetValidityPeriod: uint64
	txna ApplicationArgs 4
	btoi

	// sellPeriodLength: uint64
	txna ApplicationArgs 3
	btoi

	// assetAmount: uint64
	txna ApplicationArgs 2
	btoi

	// assetPrice: uint64
	txna ApplicationArgs 1
	btoi

	// execute bootstrap(uint64,uint64,uint64,uint64)void
	callsub bootstrap
	int 1
	return

// bootstrap(assetPrice: uint64, assetAmount: uint64, sellPeriodLength: uint64, assetValidityPeriod: uint64): void
//
// create ASA, set global key values
// @param assetPrice ASA price in microAlgos
// @param assetAmount ASA inital amount in pieces
// @param sellPeriodLength sell period length in secs
// @param assetValidityPeriod asset validity in secs, after that time it can be clawbacked
bootstrap:
	proto 4 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// allow only the app creator to call this method
	// contracts/BizKor.algo.ts:63
	// verifyAppCallTxn(this.txn, { sender: globals.creatorAddress })
	// verify sender
	txn Sender
	global CreatorAddress
	==
	assert

	// assert bootstrap hasn't been called yet
	// contracts/BizKor.algo.ts:66
	// assert(this.assetAmountInitial.value === 0)
	byte 0x6173615f746f74616c // "asa_total"
	app_global_get
	int 0
	==
	assert

	// contracts/BizKor.algo.ts:69
	// asset = sendAssetCreation({
	//       configAssetTotal: assetAmount,
	//       configAssetDecimals: 0,
	//       configAssetName: 'Bizalmi Kör Zseton',
	//       configAssetUnitName: 'BKTOVJ1',
	//       configAssetURL: 'https://algorand.hu/bk/bktovj.html',
	//       configAssetDefaultFrozen: 0,
	//       configAssetManager: globals.currentApplicationAddress,
	//       configAssetReserve: globals.currentApplicationAddress,
	//       configAssetFreeze: globals.currentApplicationAddress,
	//       configAssetClawback: globals.currentApplicationAddress,
	//     })
	itxn_begin
	int acfg
	itxn_field TypeEnum

	// contracts/BizKor.algo.ts:70
	// configAssetTotal: assetAmount
	frame_dig -2 // assetAmount: uint64
	itxn_field ConfigAssetTotal

	// contracts/BizKor.algo.ts:71
	// configAssetDecimals: 0
	int 0
	itxn_field ConfigAssetDecimals

	// contracts/BizKor.algo.ts:72
	// configAssetName: 'Bizalmi Kör Zseton'
	byte 0x42697a616c6d69204bc3b672205a7365746f6e // "Bizalmi Kör Zseton"
	itxn_field ConfigAssetName

	// contracts/BizKor.algo.ts:73
	// configAssetUnitName: 'BKTOVJ1'
	byte 0x424b544f564a31 // "BKTOVJ1"
	itxn_field ConfigAssetUnitName

	// contracts/BizKor.algo.ts:74
	// configAssetURL: 'https://algorand.hu/bk/bktovj.html'
	byte 0x68747470733a2f2f616c676f72616e642e68752f626b2f626b746f766a2e68746d6c // "https://algorand.hu/bk/bktovj.html"
	itxn_field ConfigAssetURL

	// contracts/BizKor.algo.ts:75
	// configAssetDefaultFrozen: 0
	int 0
	itxn_field ConfigAssetDefaultFrozen

	// contracts/BizKor.algo.ts:76
	// configAssetManager: globals.currentApplicationAddress
	global CurrentApplicationAddress
	itxn_field ConfigAssetManager

	// contracts/BizKor.algo.ts:77
	// configAssetReserve: globals.currentApplicationAddress
	global CurrentApplicationAddress
	itxn_field ConfigAssetReserve

	// contracts/BizKor.algo.ts:78
	// configAssetFreeze: globals.currentApplicationAddress
	global CurrentApplicationAddress
	itxn_field ConfigAssetFreeze

	// contracts/BizKor.algo.ts:79
	// configAssetClawback: globals.currentApplicationAddress
	global CurrentApplicationAddress
	itxn_field ConfigAssetClawback

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	itxn CreatedAssetID
	frame_bury 0 // asset: uint64

	// contracts/BizKor.algo.ts:83
	// this.assetAmountInitial.value = assetAmount
	byte 0x6173615f746f74616c // "asa_total"
	frame_dig -2 // assetAmount: uint64
	app_global_put

	// contracts/BizKor.algo.ts:84
	// this.assetAmount.value = assetAmount
	byte 0x6173615f616d74 // "asa_amt"
	frame_dig -2 // assetAmount: uint64
	app_global_put

	// contracts/BizKor.algo.ts:85
	// this.assetPrice.value = assetPrice
	byte 0x6173615f7072696365 // "asa_price"
	frame_dig -1 // assetPrice: uint64
	app_global_put

	// contracts/BizKor.algo.ts:86
	// this.asset.value = asset
	byte 0x6173615f6964 // "asa_id"
	frame_dig 0 // asset: uint64
	app_global_put

	// contracts/BizKor.algo.ts:87
	// this.sellPeriodEnd.value = globals.latestTimestamp + sellPeriodLength
	byte 0x656e64 // "end"
	global LatestTimestamp
	frame_dig -3 // sellPeriodLength: uint64
	+
	app_global_put

	// contracts/BizKor.algo.ts:88
	// this.assetValidityPeriod.value = assetValidityPeriod
	byte 0x6173615f76 // "asa_v"
	frame_dig -4 // assetValidityPeriod: uint64
	app_global_put
	retsub

// getAppCreatorAddress()address
*abi_route_getAppCreatorAddress:
	// The ABI return prefix
	byte 0x151f7c75

	// execute getAppCreatorAddress()address
	callsub getAppCreatorAddress
	concat
	log
	int 1
	return

// getAppCreatorAddress(): Address
//
// get app creator address
// @returns app creator address
getAppCreatorAddress:
	proto 0 1

	// contracts/BizKor.algo.ts:96
	// return this.appCreatorAddress.value;
	byte 0x61706361 // "apca"
	app_global_get
	retsub

// getAppVersion()string
*abi_route_getAppVersion:
	// The ABI return prefix
	byte 0x151f7c75

	// execute getAppVersion()string
	callsub getAppVersion
	dup
	len
	itob
	extract 6 2
	swap
	concat
	concat
	log
	int 1
	return

// getAppVersion(): string
//
// get app version
// @returns app version
getAppVersion:
	proto 0 1

	// contracts/BizKor.algo.ts:104
	// return this.appVersion.value;
	byte 0x617076 // "apv"
	app_global_get
	extract 2 0
	retsub

// getAssetAmountInitial()uint64
*abi_route_getAssetAmountInitial:
	// The ABI return prefix
	byte 0x151f7c75

	// execute getAssetAmountInitial()uint64
	callsub getAssetAmountInitial
	itob
	concat
	log
	int 1
	return

// getAssetAmountInitial(): uint64
//
// get asa initial amount
// @returns asa amount minted initially
getAssetAmountInitial:
	proto 0 1

	// contracts/BizKor.algo.ts:112
	// return this.assetAmountInitial.value;
	byte 0x6173615f746f74616c // "asa_total"
	app_global_get
	retsub

// getAssetAmount()uint64
*abi_route_getAssetAmount:
	// The ABI return prefix
	byte 0x151f7c75

	// execute getAssetAmount()uint64
	callsub getAssetAmount
	itob
	concat
	log
	int 1
	return

// getAssetAmount(): uint64
//
// get asa amount
// @returns sellable asa amount
getAssetAmount:
	proto 0 1

	// contracts/BizKor.algo.ts:120
	// return this.assetAmountInitial.value;
	byte 0x6173615f746f74616c // "asa_total"
	app_global_get
	retsub

// getAssetPrice()uint64
*abi_route_getAssetPrice:
	// The ABI return prefix
	byte 0x151f7c75

	// execute getAssetPrice()uint64
	callsub getAssetPrice
	itob
	concat
	log
	int 1
	return

// getAssetPrice(): uint64
//
// get asa price
// @returns asa price in microAlgos
getAssetPrice:
	proto 0 1

	// contracts/BizKor.algo.ts:128
	// return this.assetPrice.value;
	byte 0x6173615f7072696365 // "asa_price"
	app_global_get
	retsub

// getAssetID()uint64
*abi_route_getAssetID:
	// The ABI return prefix
	byte 0x151f7c75

	// execute getAssetID()uint64
	callsub getAssetID
	itob
	concat
	log
	int 1
	return

// getAssetID(): AssetID
//
// get asa id
// @returns asa id
getAssetID:
	proto 0 1

	// contracts/BizKor.algo.ts:136
	// return this.asset.value;
	byte 0x6173615f6964 // "asa_id"
	app_global_get
	retsub

// getSellPeriodEnd()uint64
*abi_route_getSellPeriodEnd:
	// The ABI return prefix
	byte 0x151f7c75

	// execute getSellPeriodEnd()uint64
	callsub getSellPeriodEnd
	itob
	concat
	log
	int 1
	return

// getSellPeriodEnd(): uint64
//
// get end of sell period
// @returns end of sell period as absolute time in sec, from 01-Jan-1970
getSellPeriodEnd:
	proto 0 1

	// contracts/BizKor.algo.ts:144
	// return this.sellPeriodEnd.value;
	byte 0x656e64 // "end"
	app_global_get
	retsub

// buyAsset(pay)void
*abi_route_buyAsset:
	// payment: pay
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int pay
	==
	assert

	// execute buyAsset(pay)void
	callsub buyAsset
	int 1
	return

// buyAsset(payment: PayTxn): void
//
// Buy 1 piece of the asset
// @param payment txn, where amount is equal to assetPrice, receiver is app address
buyAsset:
	proto 1 0

	// Ensure asset selling period hasn't ended yet
	// contracts/BizKor.algo.ts:153
	// assert(globals.latestTimestamp <= this.sellPeriodEnd.value, 'Sell period ended')
	global LatestTimestamp
	byte 0x656e64 // "end"
	app_global_get
	<=

	// Sell period ended
	assert

	// Ensure that buyer hasn't bought earlier this asset
	// contracts/BizKor.algo.ts:156
	// assert(this.txn.sender.assetBalance(this.asset.value) === 0, 'Asset already bought')
	txn Sender
	byte 0x6173615f6964 // "asa_id"
	app_global_get
	asset_holding_get AssetBalance
	pop
	int 0
	==

	// Asset already bought
	assert

	// Verify payment transaction: receiver is the app, amount is the asset price
	// contracts/BizKor.algo.ts:159
	// verifyPayTxn(payment, {
	//       sender: this.txn.sender,
	//       receiver: globals.currentApplicationAddress,
	//       amount: { greaterThanEqualTo: this.assetPrice.value, lessThanEqualTo: this.assetPrice.value },
	//       rekeyTo: globals.zeroAddress,
	//       closeRemainderTo: globals.zeroAddress,
	//     })
	// verify sender
	frame_dig -1 // payment: PayTxn
	gtxns Sender
	txn Sender
	==
	assert

	// verify receiver
	frame_dig -1 // payment: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==
	assert

	// verify amount
	frame_dig -1 // payment: PayTxn
	gtxns Amount
	byte 0x6173615f7072696365 // "asa_price"
	app_global_get
	>=
	assert
	frame_dig -1 // payment: PayTxn
	gtxns Amount
	byte 0x6173615f7072696365 // "asa_price"
	app_global_get
	<=
	assert

	// verify rekeyTo
	frame_dig -1 // payment: PayTxn
	gtxns RekeyTo
	global ZeroAddress
	==
	assert

	// verify closeRemainderTo
	frame_dig -1 // payment: PayTxn
	gtxns CloseRemainderTo
	global ZeroAddress
	==
	assert

	// Is there still an asset to sell? (this can be optimized away)
	// contracts/BizKor.algo.ts:168
	// assert(this.assetAmount.value > 0, 'No more ASA to sell')
	byte 0x6173615f616d74 // "asa_amt"
	app_global_get
	int 0
	>

	// No more ASA to sell
	assert

	// Unfreeze asset
	// contracts/BizKor.algo.ts:171
	// sendAssetFreeze({
	//       freezeAsset: this.asset.value,
	//       freezeAssetAccount: this.txn.sender,
	//       freezeAssetFrozen: false,
	//     })
	itxn_begin
	int afrz
	itxn_field TypeEnum

	// contracts/BizKor.algo.ts:172
	// freezeAsset: this.asset.value
	byte 0x6173615f6964 // "asa_id"
	app_global_get
	itxn_field FreezeAsset

	// contracts/BizKor.algo.ts:173
	// freezeAssetAccount: this.txn.sender
	txn Sender
	itxn_field FreezeAssetAccount

	// contracts/BizKor.algo.ts:174
	// freezeAssetFrozen: false
	int 0
	itxn_field FreezeAssetFrozen

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// Opt into asset, unconditionally
	// contracts/BizKor.algo.ts:178
	// sendAssetTransfer({
	//       xferAsset: this.asset.value,
	//       assetAmount: 0,
	//       assetReceiver: this.app.address,
	//     })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/BizKor.algo.ts:179
	// xferAsset: this.asset.value
	byte 0x6173615f6964 // "asa_id"
	app_global_get
	itxn_field XferAsset

	// contracts/BizKor.algo.ts:180
	// assetAmount: 0
	int 0
	itxn_field AssetAmount

	// contracts/BizKor.algo.ts:181
	// assetReceiver: this.app.address
	global CurrentApplicationAddress
	itxn_field AssetReceiver

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// Send asset to the buyer
	// contracts/BizKor.algo.ts:185
	// sendAssetTransfer({
	//       xferAsset: this.asset.value,
	//       assetReceiver: this.txn.sender,
	//       assetAmount: 1,
	//     })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/BizKor.algo.ts:186
	// xferAsset: this.asset.value
	byte 0x6173615f6964 // "asa_id"
	app_global_get
	itxn_field XferAsset

	// contracts/BizKor.algo.ts:187
	// assetReceiver: this.txn.sender
	txn Sender
	itxn_field AssetReceiver

	// contracts/BizKor.algo.ts:188
	// assetAmount: 1
	int 1
	itxn_field AssetAmount

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// Freeze the asset at the buyer's address (this can be optimized away)
	// contracts/BizKor.algo.ts:192
	// sendAssetFreeze({
	//       freezeAsset: this.asset.value,
	//       freezeAssetAccount: this.txn.sender,
	//       freezeAssetFrozen: true,
	//     })
	itxn_begin
	int afrz
	itxn_field TypeEnum

	// contracts/BizKor.algo.ts:193
	// freezeAsset: this.asset.value
	byte 0x6173615f6964 // "asa_id"
	app_global_get
	itxn_field FreezeAsset

	// contracts/BizKor.algo.ts:194
	// freezeAssetAccount: this.txn.sender
	txn Sender
	itxn_field FreezeAssetAccount

	// contracts/BizKor.algo.ts:195
	// freezeAssetFrozen: true
	int 1
	itxn_field FreezeAssetFrozen

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts/BizKor.algo.ts:199
	// this.assetAmount.value = this.assetAmount.value - 1
	byte 0x6173615f616d74 // "asa_amt"
	dup
	app_global_get
	int 1
	-
	app_global_put
	retsub

// sendAlgosToCreator()void
*abi_route_sendAlgosToCreator:
	// execute sendAlgosToCreator()void
	callsub sendAlgosToCreator
	int 1
	return

// sendAlgosToCreator(): void
//
// Send Algos from the app address to the app creator address
sendAlgosToCreator:
	proto 0 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// Allow only the creator to call this method
	// contracts/BizKor.algo.ts:207
	// verifyAppCallTxn(this.txn, { sender: globals.creatorAddress })
	// verify sender
	txn Sender
	global CreatorAddress
	==
	assert

	// Send back all the Algos above minAmount to the app creator
	// contracts/BizKor.algo.ts:211
	// balance = globals.currentApplicationAddress.balance
	global CurrentApplicationAddress
	acct_params_get AcctBalance
	pop
	frame_bury 0 // balance: uint64

	// *if0_condition
	// contracts/BizKor.algo.ts:212
	// balance > minAmount
	frame_dig 0 // balance: uint64
	int 600000
	>
	bz *if0_end

	// *if0_consequent
	// contracts/BizKor.algo.ts:213
	// sendPayment({
	//         receiver: globals.creatorAddress,
	//         amount: balance - minAmount,
	//       })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// contracts/BizKor.algo.ts:214
	// receiver: globals.creatorAddress
	global CreatorAddress
	itxn_field Receiver

	// contracts/BizKor.algo.ts:215
	// amount: balance - minAmount
	frame_dig 0 // balance: uint64
	int 600000
	-
	itxn_field Amount

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

*if0_end:
	retsub

// clawback(address)void
*abi_route_clawback:
	// addr: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==
	assert

	// execute clawback(address)void
	callsub clawback
	int 1
	return

// clawback(addr: Address): void
//
// Clawback asset to app
// @param address from which to clawback asset
clawback:
	proto 1 0

	// Allow only the app creator to call this method
	// contracts/BizKor.algo.ts:226
	// verifyAppCallTxn(this.txn, { sender: globals.creatorAddress })
	// verify sender
	txn Sender
	global CreatorAddress
	==
	assert

	// Clawback assets to app
	// contracts/BizKor.algo.ts:229
	// sendAssetTransfer({
	//       xferAsset: this.asset.value,
	//       assetAmount: 1,
	//       assetSender: addr,
	//       assetReceiver: globals.currentApplicationAddress,
	//     })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/BizKor.algo.ts:230
	// xferAsset: this.asset.value
	byte 0x6173615f6964 // "asa_id"
	app_global_get
	itxn_field XferAsset

	// contracts/BizKor.algo.ts:231
	// assetAmount: 1
	int 1
	itxn_field AssetAmount

	// contracts/BizKor.algo.ts:232
	// assetSender: addr
	frame_dig -1 // addr: Address
	itxn_field AssetSender

	// contracts/BizKor.algo.ts:233
	// assetReceiver: globals.currentApplicationAddress
	global CurrentApplicationAddress
	itxn_field AssetReceiver

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// Inc asset amount
	// contracts/BizKor.algo.ts:237
	// this.assetAmount.value = this.assetAmount.value + 1
	byte 0x6173615f616d74 // "asa_amt"
	dup
	app_global_get
	int 1
	+
	app_global_put
	retsub

// deleteAsset()void
*abi_route_deleteAsset:
	// execute deleteAsset()void
	callsub deleteAsset
	int 1
	return

// deleteAsset(): void
//
// Delete asset within app
deleteAsset:
	proto 0 0

	// Allow only the app creator to call this method
	// contracts/BizKor.algo.ts:245
	// verifyAppCallTxn(this.txn, { sender: globals.creatorAddress })
	// verify sender
	txn Sender
	global CreatorAddress
	==
	assert

	// Delete asset
	// contracts/BizKor.algo.ts:249
	// sendAssetConfig({
	//       configAsset: this.asset.value,
	//     })
	itxn_begin
	int acfg
	itxn_field TypeEnum

	// contracts/BizKor.algo.ts:250
	// configAsset: this.asset.value
	byte 0x6173615f6964 // "asa_id"
	app_global_get
	itxn_field ConfigAsset

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// deleteApplication()void
*abi_route_deleteApplication:
	// execute deleteApplication()void
	callsub deleteApplication
	int 1
	return

// deleteApplication(): void
//
// Delete app with ABI method
deleteApplication:
	proto 0 0

	// Allow only the app creator to call this method
	// contracts/BizKor.algo.ts:259
	// verifyAppCallTxn(this.txn, { sender: globals.creatorAddress })
	// verify sender
	txn Sender
	global CreatorAddress
	==
	assert

	// Send back Algos to app creator account
	// contracts/BizKor.algo.ts:262
	// sendPayment({
	//       receiver: globals.creatorAddress,
	//       amount: 0,
	//       closeRemainderTo: globals.creatorAddress,
	//     })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// contracts/BizKor.algo.ts:263
	// receiver: globals.creatorAddress
	global CreatorAddress
	itxn_field Receiver

	// contracts/BizKor.algo.ts:264
	// amount: 0
	int 0
	itxn_field Amount

	// contracts/BizKor.algo.ts:265
	// closeRemainderTo: globals.creatorAddress
	global CreatorAddress
	itxn_field CloseRemainderTo

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

*create_NoOp:
	method "createApplication()void"
	txna ApplicationArgs 0
	match *abi_route_createApplication
	err

*call_NoOp:
	method "bootstrap(uint64,uint64,uint64,uint64)void"
	method "getAppCreatorAddress()address"
	method "getAppVersion()string"
	method "getAssetAmountInitial()uint64"
	method "getAssetAmount()uint64"
	method "getAssetPrice()uint64"
	method "getAssetID()uint64"
	method "getSellPeriodEnd()uint64"
	method "buyAsset(pay)void"
	method "sendAlgosToCreator()void"
	method "clawback(address)void"
	method "deleteAsset()void"
	txna ApplicationArgs 0
	match *abi_route_bootstrap *abi_route_getAppCreatorAddress *abi_route_getAppVersion *abi_route_getAssetAmountInitial *abi_route_getAssetAmount *abi_route_getAssetPrice *abi_route_getAssetID *abi_route_getSellPeriodEnd *abi_route_buyAsset *abi_route_sendAlgosToCreator *abi_route_clawback *abi_route_deleteAsset
	err

*call_DeleteApplication:
	method "deleteApplication()void"
	txna ApplicationArgs 0
	match *abi_route_deleteApplication
	err