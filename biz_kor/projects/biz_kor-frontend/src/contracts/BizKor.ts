/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import type {
  ABIAppCallArg,
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  AppCompilationResult,
  AppReference,
  AppState,
  AppStorageSchema,
  CoreAppCallArgs,
  RawAppCallArgs,
  TealTemplateParams,
} from '@algorandfoundation/algokit-utils/types/app'
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import type { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import type { SendTransactionResult, TransactionToSign, SendTransactionFrom, SendTransactionParams } from '@algorandfoundation/algokit-utils/types/transaction'
import type { ABIResult, TransactionWithSigner } from 'algosdk'
import { Algodv2, OnApplicationComplete, Transaction, AtomicTransactionComposer, modelsv2 } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "createApplication()void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "bootstrap(uint64,uint64,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getAppCreatorAddress()address": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getAppVersion()string": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getAssetAmountInitial()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getAssetAmount()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getAssetPrice()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getAssetID()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getSellPeriodEnd()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "buyAsset(pay)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "sendAlgosToCreator()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "clawback(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "deleteAsset()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "deleteApplication()void": {
      "call_config": {
        "delete_application": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "appVersion": {
          "type": "bytes",
          "key": "apv"
        },
        "appCreatorAddress": {
          "type": "bytes",
          "key": "apca"
        },
        "assetAmountInitial": {
          "type": "uint64",
          "key": "asa_total"
        },
        "assetAmount": {
          "type": "uint64",
          "key": "asa_amt"
        },
        "assetPrice": {
          "type": "uint64",
          "key": "asa_price"
        },
        "asset": {
          "type": "uint64",
          "key": "asa_id"
        },
        "sellPeriodEnd": {
          "type": "uint64",
          "key": "end"
        },
        "assetValidityPeriod": {
          "type": "uint64",
          "key": "asa_v"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 2,
      "num_uints": 6
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "contract": {
    "name": "BizKor",
    "desc": "",
    "methods": [
      {
        "name": "createApplication",
        "desc": "Init the values of global keys",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "bootstrap",
        "desc": "create ASA, set global key values",
        "args": [
          {
            "name": "assetPrice",
            "type": "uint64",
            "desc": "ASA price in microAlgos"
          },
          {
            "name": "assetAmount",
            "type": "uint64",
            "desc": "ASA inital amount in pieces"
          },
          {
            "name": "sellPeriodLength",
            "type": "uint64",
            "desc": "sell period length in secs"
          },
          {
            "name": "assetValidityPeriod",
            "type": "uint64",
            "desc": "asset validity in secs, after that time it can be clawbacked"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "getAppCreatorAddress",
        "desc": "get app creator address",
        "args": [],
        "returns": {
          "type": "address",
          "desc": "app creator address"
        }
      },
      {
        "name": "getAppVersion",
        "desc": "get app version",
        "args": [],
        "returns": {
          "type": "string",
          "desc": "app version"
        }
      },
      {
        "name": "getAssetAmountInitial",
        "desc": "get asa initial amount",
        "args": [],
        "returns": {
          "type": "uint64",
          "desc": "asa amount minted initially"
        }
      },
      {
        "name": "getAssetAmount",
        "desc": "get asa amount",
        "args": [],
        "returns": {
          "type": "uint64",
          "desc": "sellable asa amount"
        }
      },
      {
        "name": "getAssetPrice",
        "desc": "get asa price",
        "args": [],
        "returns": {
          "type": "uint64",
          "desc": "asa price in microAlgos"
        }
      },
      {
        "name": "getAssetID",
        "desc": "get asa id",
        "args": [],
        "returns": {
          "type": "uint64",
          "desc": "asa id"
        }
      },
      {
        "name": "getSellPeriodEnd",
        "desc": "get end of sell period",
        "args": [],
        "returns": {
          "type": "uint64",
          "desc": "end of sell period as absolute time in sec, from 01-Jan-1970"
        }
      },
      {
        "name": "buyAsset",
        "desc": "Buy 1 piece of the asset",
        "args": [
          {
            "name": "payment",
            "type": "pay",
            "desc": "txn, where amount is equal to assetPrice, receiver is app address"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "sendAlgosToCreator",
        "desc": "Send Algos from the app address to the app creator address",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "clawback",
        "desc": "Clawback asset to app",
        "args": [
          {
            "name": "addr",
            "type": "address"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "deleteAsset",
        "desc": "Delete asset within app",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "deleteApplication",
        "desc": "Delete app with ABI method",
        "args": [],
        "returns": {
          "type": "void"
        }
      }
    ]
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt.
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

export type AppCreateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult> & AppReference
export type AppUpdateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult>

export type AppClientComposeCallCoreParams = Omit<AppClientCallCoreParams, 'sendParams'> & {
  sendParams?: Omit<SendTransactionParams, 'skipSending' | 'atc' | 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources'>
}
export type AppClientComposeExecuteParams = Pick<SendTransactionParams, 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources' | 'suppressLog'>

export type IncludeSchema = {
  /**
   * Any overrides for the storage schema to request for the created app; by default the schema indicated by the app spec is used.
   */
  schema?: Partial<AppStorageSchema>
}

/**
 * Defines the types of available calls and state of the BizKor smart contract.
 */
export type BizKor = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication()void' | 'createApplication', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'bootstrap(uint64,uint64,uint64,uint64)void' | 'bootstrap', {
      argsObj: {
        /**
         * ASA price in microAlgos
         */
        assetPrice: bigint | number
        /**
         * ASA inital amount in pieces
         */
        assetAmount: bigint | number
        /**
         * sell period length in secs
         */
        sellPeriodLength: bigint | number
        /**
         * asset validity in secs, after that time it can be clawbacked
         */
        assetValidityPeriod: bigint | number
      }
      argsTuple: [assetPrice: bigint | number, assetAmount: bigint | number, sellPeriodLength: bigint | number, assetValidityPeriod: bigint | number]
      returns: void
    }>
    & Record<'getAppCreatorAddress()address' | 'getAppCreatorAddress', {
      argsObj: {
      }
      argsTuple: []
      /**
       * app creator address
       */
      returns: string
    }>
    & Record<'getAppVersion()string' | 'getAppVersion', {
      argsObj: {
      }
      argsTuple: []
      /**
       * app version
       */
      returns: string
    }>
    & Record<'getAssetAmountInitial()uint64' | 'getAssetAmountInitial', {
      argsObj: {
      }
      argsTuple: []
      /**
       * asa amount minted initially
       */
      returns: bigint
    }>
    & Record<'getAssetAmount()uint64' | 'getAssetAmount', {
      argsObj: {
      }
      argsTuple: []
      /**
       * sellable asa amount
       */
      returns: bigint
    }>
    & Record<'getAssetPrice()uint64' | 'getAssetPrice', {
      argsObj: {
      }
      argsTuple: []
      /**
       * asa price in microAlgos
       */
      returns: bigint
    }>
    & Record<'getAssetID()uint64' | 'getAssetID', {
      argsObj: {
      }
      argsTuple: []
      /**
       * asa id
       */
      returns: bigint
    }>
    & Record<'getSellPeriodEnd()uint64' | 'getSellPeriodEnd', {
      argsObj: {
      }
      argsTuple: []
      /**
       * end of sell period as absolute time in sec, from 01-Jan-1970
       */
      returns: bigint
    }>
    & Record<'buyAsset(pay)void' | 'buyAsset', {
      argsObj: {
        /**
         * txn, where amount is equal to assetPrice, receiver is app address
         */
        payment: TransactionToSign | Transaction | Promise<SendTransactionResult>
      }
      argsTuple: [payment: TransactionToSign | Transaction | Promise<SendTransactionResult>]
      returns: void
    }>
    & Record<'sendAlgosToCreator()void' | 'sendAlgosToCreator', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'clawback(address)void' | 'clawback', {
      argsObj: {
        addr: string
      }
      argsTuple: [addr: string]
      returns: void
    }>
    & Record<'deleteAsset()void' | 'deleteAsset', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'deleteApplication()void' | 'deleteApplication', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      apv?: BinaryState
      apca?: BinaryState
      asaTotal?: IntegerState
      asaAmt?: IntegerState
      asaPrice?: IntegerState
      asaId?: IntegerState
      end?: IntegerState
      asaV?: IntegerState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type BizKorSig = keyof BizKor['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends BizKorSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Maps a method signature from the BizKor smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends BizKorSig> = BizKor['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the BizKor smart contract to the method's return type
 */
export type MethodReturn<TSignature extends BizKorSig> = BizKor['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type BizKorCreateCalls = (typeof BizKorCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type BizKorCreateCallParams =
  | (TypedCallParams<'createApplication()void'> & (OnCompleteNoOp))
/**
 * A factory for available 'delete' calls
 */
export type BizKorDeleteCalls = (typeof BizKorCallFactory)['delete']
/**
 * Defines supported delete methods for this smart contract
 */
export type BizKorDeleteCallParams =
  | TypedCallParams<'deleteApplication()void'>
/**
 * Defines arguments required for the deploy method.
 */
export type BizKorDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: BizKorCreateCalls) => BizKorCreateCallParams
  /**
   * A delegate which takes a delete call factory and returns the delete call params for this smart contract
   */
  deleteCall?: (callFactory: BizKorDeleteCalls) => BizKorDeleteCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class BizKorCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the BizKor smart contract using the createApplication()void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      createApplication(args: MethodArgs<'createApplication()void'>, params: AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: 'createApplication()void' as const,
          methodArgs: Array.isArray(args) ? args : [],
          ...params,
        }
      },
    }
  }

  /**
   * Gets available delete call factories
   */
  static get delete() {
    return {
      /**
       * Constructs a delete call for the BizKor smart contract using the deleteApplication()void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      deleteApplication(args: MethodArgs<'deleteApplication()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
        return {
          method: 'deleteApplication()void' as const,
          methodArgs: Array.isArray(args) ? args : [],
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the bootstrap(uint64,uint64,uint64,uint64)void ABI method
   *
   * create ASA, set global key values
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static bootstrap(args: MethodArgs<'bootstrap(uint64,uint64,uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'bootstrap(uint64,uint64,uint64,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.assetPrice, args.assetAmount, args.sellPeriodLength, args.assetValidityPeriod],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the getAppCreatorAddress()address ABI method
   *
   * get app creator address
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getAppCreatorAddress(args: MethodArgs<'getAppCreatorAddress()address'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'getAppCreatorAddress()address' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the getAppVersion()string ABI method
   *
   * get app version
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getAppVersion(args: MethodArgs<'getAppVersion()string'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'getAppVersion()string' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the getAssetAmountInitial()uint64 ABI method
   *
   * get asa initial amount
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getAssetAmountInitial(args: MethodArgs<'getAssetAmountInitial()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'getAssetAmountInitial()uint64' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the getAssetAmount()uint64 ABI method
   *
   * get asa amount
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getAssetAmount(args: MethodArgs<'getAssetAmount()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'getAssetAmount()uint64' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the getAssetPrice()uint64 ABI method
   *
   * get asa price
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getAssetPrice(args: MethodArgs<'getAssetPrice()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'getAssetPrice()uint64' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the getAssetID()uint64 ABI method
   *
   * get asa id
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getAssetId(args: MethodArgs<'getAssetID()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'getAssetID()uint64' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the getSellPeriodEnd()uint64 ABI method
   *
   * get end of sell period
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getSellPeriodEnd(args: MethodArgs<'getSellPeriodEnd()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'getSellPeriodEnd()uint64' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the buyAsset(pay)void ABI method
   *
   * Buy 1 piece of the asset
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static buyAsset(args: MethodArgs<'buyAsset(pay)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'buyAsset(pay)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.payment],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the sendAlgosToCreator()void ABI method
   *
   * Send Algos from the app address to the app creator address
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static sendAlgosToCreator(args: MethodArgs<'sendAlgosToCreator()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'sendAlgosToCreator()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the clawback(address)void ABI method
   *
   * Clawback asset to app
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static clawback(args: MethodArgs<'clawback(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'clawback(address)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.addr],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the deleteAsset()void ABI method
   *
   * Delete asset within app
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static deleteAsset(args: MethodArgs<'deleteAsset()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'deleteAsset()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
}

/**
 * A client to make calls to the BizKor smart contract
 */
export class BizKorClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `BizKorClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn, TResult extends AppCallTransactionResult = AppCallTransactionResult>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> & TResult {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue } as AppCallTransactionResultOfType<TReturn> & TResult
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof BizKor['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the BizKor smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: BizKorDeployArgs & AppClientDeployCoreParams & IncludeSchema = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(BizKorCallFactory.create)
    const deleteArgs = params.deleteCall?.(BizKorCallFactory.delete)
    return this.appClient.deploy({
      ...params,
      deleteArgs,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the BizKor smart contract using the createApplication()void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The create result
       */
      async createApplication(args: MethodArgs<'createApplication()void'>, params: AppClientCallCoreParams & AppClientCompilationParams & IncludeSchema & (OnCompleteNoOp) = {}) {
        return $this.mapReturnValue<MethodReturn<'createApplication()void'>, AppCreateCallTransactionResult>(await $this.appClient.create(BizKorCallFactory.create.createApplication(args, params)))
      },
    }
  }

  /**
   * Gets available delete methods
   */
  public get delete() {
    const $this = this
    return {
      /**
       * Deletes an existing instance of the BizKor smart contract using the deleteApplication()void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The delete result
       */
      async deleteApplication(args: MethodArgs<'deleteApplication()void'>, params: AppClientCallCoreParams = {}) {
        return $this.mapReturnValue<MethodReturn<'deleteApplication()void'>>(await $this.appClient.delete(BizKorCallFactory.delete.deleteApplication(args, params)))
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the BizKor smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the bootstrap(uint64,uint64,uint64,uint64)void ABI method.
   *
   * create ASA, set global key values
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public bootstrap(args: MethodArgs<'bootstrap(uint64,uint64,uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(BizKorCallFactory.bootstrap(args, params))
  }

  /**
   * Calls the getAppCreatorAddress()address ABI method.
   *
   * get app creator address
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: app creator address
   */
  public getAppCreatorAddress(args: MethodArgs<'getAppCreatorAddress()address'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(BizKorCallFactory.getAppCreatorAddress(args, params))
  }

  /**
   * Calls the getAppVersion()string ABI method.
   *
   * get app version
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: app version
   */
  public getAppVersion(args: MethodArgs<'getAppVersion()string'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(BizKorCallFactory.getAppVersion(args, params))
  }

  /**
   * Calls the getAssetAmountInitial()uint64 ABI method.
   *
   * get asa initial amount
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: asa amount minted initially
   */
  public getAssetAmountInitial(args: MethodArgs<'getAssetAmountInitial()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(BizKorCallFactory.getAssetAmountInitial(args, params))
  }

  /**
   * Calls the getAssetAmount()uint64 ABI method.
   *
   * get asa amount
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: sellable asa amount
   */
  public getAssetAmount(args: MethodArgs<'getAssetAmount()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(BizKorCallFactory.getAssetAmount(args, params))
  }

  /**
   * Calls the getAssetPrice()uint64 ABI method.
   *
   * get asa price
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: asa price in microAlgos
   */
  public getAssetPrice(args: MethodArgs<'getAssetPrice()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(BizKorCallFactory.getAssetPrice(args, params))
  }

  /**
   * Calls the getAssetID()uint64 ABI method.
   *
   * get asa id
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: asa id
   */
  public getAssetId(args: MethodArgs<'getAssetID()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(BizKorCallFactory.getAssetId(args, params))
  }

  /**
   * Calls the getSellPeriodEnd()uint64 ABI method.
   *
   * get end of sell period
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: end of sell period as absolute time in sec, from 01-Jan-1970
   */
  public getSellPeriodEnd(args: MethodArgs<'getSellPeriodEnd()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(BizKorCallFactory.getSellPeriodEnd(args, params))
  }

  /**
   * Calls the buyAsset(pay)void ABI method.
   *
   * Buy 1 piece of the asset
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public buyAsset(args: MethodArgs<'buyAsset(pay)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(BizKorCallFactory.buyAsset(args, params))
  }

  /**
   * Calls the sendAlgosToCreator()void ABI method.
   *
   * Send Algos from the app address to the app creator address
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public sendAlgosToCreator(args: MethodArgs<'sendAlgosToCreator()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(BizKorCallFactory.sendAlgosToCreator(args, params))
  }

  /**
   * Calls the clawback(address)void ABI method.
   *
   * Clawback asset to app
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public clawback(args: MethodArgs<'clawback(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(BizKorCallFactory.clawback(args, params))
  }

  /**
   * Calls the deleteAsset()void ABI method.
   *
   * Delete asset within app
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public deleteAsset(args: MethodArgs<'deleteAsset()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(BizKorCallFactory.deleteAsset(args, params))
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<BizKor['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get apv() {
        return BizKorClient.getBinaryState(state, 'apv')
      },
      get apca() {
        return BizKorClient.getBinaryState(state, 'apca')
      },
      get asaTotal() {
        return BizKorClient.getIntegerState(state, 'asa_total')
      },
      get asaAmt() {
        return BizKorClient.getIntegerState(state, 'asa_amt')
      },
      get asaPrice() {
        return BizKorClient.getIntegerState(state, 'asa_price')
      },
      get asaId() {
        return BizKorClient.getIntegerState(state, 'asa_id')
      },
      get end() {
        return BizKorClient.getIntegerState(state, 'end')
      },
      get asaV() {
        return BizKorClient.getIntegerState(state, 'asa_v')
      },
    }
  }

  public compose(): BizKorComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      bootstrap(args: MethodArgs<'bootstrap(uint64,uint64,uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.bootstrap(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getAppCreatorAddress(args: MethodArgs<'getAppCreatorAddress()address'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getAppCreatorAddress(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getAppVersion(args: MethodArgs<'getAppVersion()string'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getAppVersion(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getAssetAmountInitial(args: MethodArgs<'getAssetAmountInitial()uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getAssetAmountInitial(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getAssetAmount(args: MethodArgs<'getAssetAmount()uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getAssetAmount(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getAssetPrice(args: MethodArgs<'getAssetPrice()uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getAssetPrice(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getAssetId(args: MethodArgs<'getAssetID()uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getAssetId(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getSellPeriodEnd(args: MethodArgs<'getSellPeriodEnd()uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getSellPeriodEnd(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      buyAsset(args: MethodArgs<'buyAsset(pay)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.buyAsset(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      sendAlgosToCreator(args: MethodArgs<'sendAlgosToCreator()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.sendAlgosToCreator(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      clawback(args: MethodArgs<'clawback(address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clawback(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      deleteAsset(args: MethodArgs<'deleteAsset()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.deleteAsset(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      get delete() {
        const $this = this
        return {
          deleteApplication(args: MethodArgs<'deleteApplication()void'>, params?: AppClientComposeCallCoreParams) {
            promiseChain = promiseChain.then(() => client.delete.deleteApplication(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
            resultMappers.push(undefined)
            return $this
          },
        }
      },
      clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await atc.simulate(client.algod, new modelsv2.SimulateRequest({ txnGroups: [], ...options }))
        return {
          ...result,
          returns: result.methodResults?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      },
      async execute(sendParams?: AppClientComposeExecuteParams) {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as BizKorComposer
  }
}
export type BizKorComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the bootstrap(uint64,uint64,uint64,uint64)void ABI method.
   *
   * create ASA, set global key values
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  bootstrap(args: MethodArgs<'bootstrap(uint64,uint64,uint64,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): BizKorComposer<[...TReturns, MethodReturn<'bootstrap(uint64,uint64,uint64,uint64)void'>]>

  /**
   * Calls the getAppCreatorAddress()address ABI method.
   *
   * get app creator address
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getAppCreatorAddress(args: MethodArgs<'getAppCreatorAddress()address'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): BizKorComposer<[...TReturns, MethodReturn<'getAppCreatorAddress()address'>]>

  /**
   * Calls the getAppVersion()string ABI method.
   *
   * get app version
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getAppVersion(args: MethodArgs<'getAppVersion()string'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): BizKorComposer<[...TReturns, MethodReturn<'getAppVersion()string'>]>

  /**
   * Calls the getAssetAmountInitial()uint64 ABI method.
   *
   * get asa initial amount
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getAssetAmountInitial(args: MethodArgs<'getAssetAmountInitial()uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): BizKorComposer<[...TReturns, MethodReturn<'getAssetAmountInitial()uint64'>]>

  /**
   * Calls the getAssetAmount()uint64 ABI method.
   *
   * get asa amount
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getAssetAmount(args: MethodArgs<'getAssetAmount()uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): BizKorComposer<[...TReturns, MethodReturn<'getAssetAmount()uint64'>]>

  /**
   * Calls the getAssetPrice()uint64 ABI method.
   *
   * get asa price
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getAssetPrice(args: MethodArgs<'getAssetPrice()uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): BizKorComposer<[...TReturns, MethodReturn<'getAssetPrice()uint64'>]>

  /**
   * Calls the getAssetID()uint64 ABI method.
   *
   * get asa id
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getAssetId(args: MethodArgs<'getAssetID()uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): BizKorComposer<[...TReturns, MethodReturn<'getAssetID()uint64'>]>

  /**
   * Calls the getSellPeriodEnd()uint64 ABI method.
   *
   * get end of sell period
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getSellPeriodEnd(args: MethodArgs<'getSellPeriodEnd()uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): BizKorComposer<[...TReturns, MethodReturn<'getSellPeriodEnd()uint64'>]>

  /**
   * Calls the buyAsset(pay)void ABI method.
   *
   * Buy 1 piece of the asset
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  buyAsset(args: MethodArgs<'buyAsset(pay)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): BizKorComposer<[...TReturns, MethodReturn<'buyAsset(pay)void'>]>

  /**
   * Calls the sendAlgosToCreator()void ABI method.
   *
   * Send Algos from the app address to the app creator address
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  sendAlgosToCreator(args: MethodArgs<'sendAlgosToCreator()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): BizKorComposer<[...TReturns, MethodReturn<'sendAlgosToCreator()void'>]>

  /**
   * Calls the clawback(address)void ABI method.
   *
   * Clawback asset to app
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clawback(args: MethodArgs<'clawback(address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): BizKorComposer<[...TReturns, MethodReturn<'clawback(address)void'>]>

  /**
   * Calls the deleteAsset()void ABI method.
   *
   * Delete asset within app
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  deleteAsset(args: MethodArgs<'deleteAsset()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): BizKorComposer<[...TReturns, MethodReturn<'deleteAsset()void'>]>

  /**
   * Gets available delete methods
   */
  readonly delete: {
    /**
     * Deletes an existing instance of the BizKor smart contract using the deleteApplication()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    deleteApplication(args: MethodArgs<'deleteApplication()void'>, params?: AppClientComposeCallCoreParams): BizKorComposer<[...TReturns, MethodReturn<'deleteApplication()void'>]>
  }

  /**
   * Makes a clear_state call to an existing instance of the BizKor smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs): BizKorComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): BizKorComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(options?: SimulateOptions): Promise<BizKorComposerSimulateResult<TReturns>>
  /**
   * Executes the transaction group and returns the results
   */
  execute(sendParams?: AppClientComposeExecuteParams): Promise<BizKorComposerResults<TReturns>>
}
export type SimulateOptions = Omit<ConstructorParameters<typeof modelsv2.SimulateRequest>[0], 'txnGroups'>
export type BizKorComposerSimulateResult<TReturns extends [...any[]]> = {
  returns: TReturns
  methodResults: ABIResult[]
  simulateResponse: modelsv2.SimulateResponse
}
export type BizKorComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
