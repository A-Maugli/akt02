/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import type {
  ABIAppCallArg,
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  AppCompilationResult,
  AppReference,
  AppState,
  AppStorageSchema,
  CoreAppCallArgs,
  RawAppCallArgs,
  TealTemplateParams,
} from '@algorandfoundation/algokit-utils/types/app'
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import type { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import type { SendTransactionResult, TransactionToSign, SendTransactionFrom, SendTransactionParams } from '@algorandfoundation/algokit-utils/types/transaction'
import type { ABIResult, TransactionWithSigner } from 'algosdk'
import { Algodv2, OnApplicationComplete, Transaction, AtomicTransactionComposer, modelsv2 } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "initGlobalKeys()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "createAssetTest()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "optIntoAsset(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "startAssetSell(uint64,uint64,axfer)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "continueAssetSell(axfer)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "buyAsset(pay)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "deleteApplication()void": {
      "call_config": {
        "delete_application": "CALL"
      }
    },
    "createApplication()void": {
      "call_config": {
        "no_op": "CREATE"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "assetAmount": {
          "type": "uint64",
          "key": "assetAmount"
        },
        "assetPrice": {
          "type": "uint64",
          "key": "assetPrice"
        },
        "asset": {
          "type": "uint64",
          "key": "asset"
        },
        "sellPeriodEnd": {
          "type": "uint64",
          "key": "sellPeriodEnd"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 0,
      "num_uints": 4
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "contract": {
    "name": "BizKor",
    "desc": "",
    "methods": [
      {
        "name": "initGlobalKeys",
        "desc": "Init the values of global keys",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "createAssetTest",
        "desc": "For test only, create an asset",
        "args": [],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "optIntoAsset",
        "desc": "Opt in to an asset for the app account",
        "args": [
          {
            "name": "asset",
            "type": "uint64",
            "desc": "Asset to opt into"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "startAssetSell",
        "desc": "Start asset selling period",
        "args": [
          {
            "name": "price",
            "type": "uint64",
            "desc": "asset price in /uAlgos"
          },
          {
            "name": "length",
            "type": "uint64",
            "desc": "selling period length in secs"
          },
          {
            "name": "axfer",
            "type": "axfer",
            "desc": "initial asset transfer to the app account"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "continueAssetSell",
        "desc": "Send assets clawed back to app account",
        "args": [
          {
            "name": "axfer",
            "type": "axfer",
            "desc": "asset transfer to the app account"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "buyAsset",
        "desc": "Buy 1 piece of the asset",
        "args": [
          {
            "name": "payment",
            "type": "pay",
            "desc": "in /uAlgos"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "deleteApplication",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "createApplication",
        "args": [],
        "returns": {
          "type": "void"
        }
      }
    ]
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt.
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

export type AppCreateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult> & AppReference
export type AppUpdateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult>

export type AppClientComposeCallCoreParams = Omit<AppClientCallCoreParams, 'sendParams'> & {
  sendParams?: Omit<SendTransactionParams, 'skipSending' | 'atc' | 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources'>
}
export type AppClientComposeExecuteParams = Pick<SendTransactionParams, 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources' | 'suppressLog'>

export type IncludeSchema = {
  /**
   * Any overrides for the storage schema to request for the created app; by default the schema indicated by the app spec is used.
   */
  schema?: Partial<AppStorageSchema>
}

/**
 * Defines the types of available calls and state of the BizKor smart contract.
 */
export type BizKor = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'initGlobalKeys()void' | 'initGlobalKeys', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'createAssetTest()uint64' | 'createAssetTest', {
      argsObj: {
      }
      argsTuple: []
      returns: bigint
    }>
    & Record<'optIntoAsset(uint64)void' | 'optIntoAsset', {
      argsObj: {
        /**
         * Asset to opt into
         */
        asset: bigint | number
      }
      argsTuple: [asset: bigint | number]
      returns: void
    }>
    & Record<'startAssetSell(uint64,uint64,axfer)void' | 'startAssetSell', {
      argsObj: {
        /**
         * asset price in /uAlgos
         */
        price: bigint | number
        /**
         * selling period length in secs
         */
        length: bigint | number
        /**
         * initial asset transfer to the app account
         */
        axfer: TransactionToSign | Transaction | Promise<SendTransactionResult>
      }
      argsTuple: [price: bigint | number, length: bigint | number, axfer: TransactionToSign | Transaction | Promise<SendTransactionResult>]
      returns: void
    }>
    & Record<'continueAssetSell(axfer)void' | 'continueAssetSell', {
      argsObj: {
        /**
         * asset transfer to the app account
         */
        axfer: TransactionToSign | Transaction | Promise<SendTransactionResult>
      }
      argsTuple: [axfer: TransactionToSign | Transaction | Promise<SendTransactionResult>]
      returns: void
    }>
    & Record<'buyAsset(pay)void' | 'buyAsset', {
      argsObj: {
        /**
         * in /uAlgos
         */
        payment: TransactionToSign | Transaction | Promise<SendTransactionResult>
      }
      argsTuple: [payment: TransactionToSign | Transaction | Promise<SendTransactionResult>]
      returns: void
    }>
    & Record<'deleteApplication()void' | 'deleteApplication', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'createApplication()void' | 'createApplication', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      assetAmount?: IntegerState
      assetPrice?: IntegerState
      asset?: IntegerState
      sellPeriodEnd?: IntegerState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type BizKorSig = keyof BizKor['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends BizKorSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Maps a method signature from the BizKor smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends BizKorSig> = BizKor['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the BizKor smart contract to the method's return type
 */
export type MethodReturn<TSignature extends BizKorSig> = BizKor['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type BizKorCreateCalls = (typeof BizKorCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type BizKorCreateCallParams =
  | (TypedCallParams<'createApplication()void'> & (OnCompleteNoOp))
/**
 * A factory for available 'delete' calls
 */
export type BizKorDeleteCalls = (typeof BizKorCallFactory)['delete']
/**
 * Defines supported delete methods for this smart contract
 */
export type BizKorDeleteCallParams =
  | TypedCallParams<'deleteApplication()void'>
/**
 * Defines arguments required for the deploy method.
 */
export type BizKorDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: BizKorCreateCalls) => BizKorCreateCallParams
  /**
   * A delegate which takes a delete call factory and returns the delete call params for this smart contract
   */
  deleteCall?: (callFactory: BizKorDeleteCalls) => BizKorDeleteCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class BizKorCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the BizKor smart contract using the createApplication()void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      createApplication(args: MethodArgs<'createApplication()void'>, params: AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: 'createApplication()void' as const,
          methodArgs: Array.isArray(args) ? args : [],
          ...params,
        }
      },
    }
  }

  /**
   * Gets available delete call factories
   */
  static get delete() {
    return {
      /**
       * Constructs a delete call for the BizKor smart contract using the deleteApplication()void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      deleteApplication(args: MethodArgs<'deleteApplication()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
        return {
          method: 'deleteApplication()void' as const,
          methodArgs: Array.isArray(args) ? args : [],
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the initGlobalKeys()void ABI method
   *
   * Init the values of global keys
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static initGlobalKeys(args: MethodArgs<'initGlobalKeys()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'initGlobalKeys()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the createAssetTest()uint64 ABI method
   *
   * For test only, create an asset
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static createAssetTest(args: MethodArgs<'createAssetTest()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'createAssetTest()uint64' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the optIntoAsset(uint64)void ABI method
   *
   * Opt in to an asset for the app account
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static optIntoAsset(args: MethodArgs<'optIntoAsset(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'optIntoAsset(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.asset],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the startAssetSell(uint64,uint64,axfer)void ABI method
   *
   * Start asset selling period
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static startAssetSell(args: MethodArgs<'startAssetSell(uint64,uint64,axfer)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'startAssetSell(uint64,uint64,axfer)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.price, args.length, args.axfer],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the continueAssetSell(axfer)void ABI method
   *
   * Send assets clawed back to app account
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static continueAssetSell(args: MethodArgs<'continueAssetSell(axfer)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'continueAssetSell(axfer)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.axfer],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the buyAsset(pay)void ABI method
   *
   * Buy 1 piece of the asset
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static buyAsset(args: MethodArgs<'buyAsset(pay)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'buyAsset(pay)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.payment],
      ...params,
    }
  }
}

/**
 * A client to make calls to the BizKor smart contract
 */
export class BizKorClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `BizKorClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn, TResult extends AppCallTransactionResult = AppCallTransactionResult>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> & TResult {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue } as AppCallTransactionResultOfType<TReturn> & TResult
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof BizKor['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the BizKor smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: BizKorDeployArgs & AppClientDeployCoreParams & IncludeSchema = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(BizKorCallFactory.create)
    const deleteArgs = params.deleteCall?.(BizKorCallFactory.delete)
    return this.appClient.deploy({
      ...params,
      deleteArgs,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the BizKor smart contract using the createApplication()void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The create result
       */
      async createApplication(args: MethodArgs<'createApplication()void'>, params: AppClientCallCoreParams & AppClientCompilationParams & IncludeSchema & (OnCompleteNoOp) = {}) {
        return $this.mapReturnValue<MethodReturn<'createApplication()void'>, AppCreateCallTransactionResult>(await $this.appClient.create(BizKorCallFactory.create.createApplication(args, params)))
      },
    }
  }

  /**
   * Gets available delete methods
   */
  public get delete() {
    const $this = this
    return {
      /**
       * Deletes an existing instance of the BizKor smart contract using the deleteApplication()void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The delete result
       */
      async deleteApplication(args: MethodArgs<'deleteApplication()void'>, params: AppClientCallCoreParams = {}) {
        return $this.mapReturnValue<MethodReturn<'deleteApplication()void'>>(await $this.appClient.delete(BizKorCallFactory.delete.deleteApplication(args, params)))
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the BizKor smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the initGlobalKeys()void ABI method.
   *
   * Init the values of global keys
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public initGlobalKeys(args: MethodArgs<'initGlobalKeys()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(BizKorCallFactory.initGlobalKeys(args, params))
  }

  /**
   * Calls the createAssetTest()uint64 ABI method.
   *
   * For test only, create an asset
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public createAssetTest(args: MethodArgs<'createAssetTest()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(BizKorCallFactory.createAssetTest(args, params))
  }

  /**
   * Calls the optIntoAsset(uint64)void ABI method.
   *
   * Opt in to an asset for the app account
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public optIntoAsset(args: MethodArgs<'optIntoAsset(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(BizKorCallFactory.optIntoAsset(args, params))
  }

  /**
   * Calls the startAssetSell(uint64,uint64,axfer)void ABI method.
   *
   * Start asset selling period
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public startAssetSell(args: MethodArgs<'startAssetSell(uint64,uint64,axfer)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(BizKorCallFactory.startAssetSell(args, params))
  }

  /**
   * Calls the continueAssetSell(axfer)void ABI method.
   *
   * Send assets clawed back to app account
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public continueAssetSell(args: MethodArgs<'continueAssetSell(axfer)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(BizKorCallFactory.continueAssetSell(args, params))
  }

  /**
   * Calls the buyAsset(pay)void ABI method.
   *
   * Buy 1 piece of the asset
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public buyAsset(args: MethodArgs<'buyAsset(pay)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(BizKorCallFactory.buyAsset(args, params))
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<BizKor['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get assetAmount() {
        return BizKorClient.getIntegerState(state, 'assetAmount')
      },
      get assetPrice() {
        return BizKorClient.getIntegerState(state, 'assetPrice')
      },
      get asset() {
        return BizKorClient.getIntegerState(state, 'asset')
      },
      get sellPeriodEnd() {
        return BizKorClient.getIntegerState(state, 'sellPeriodEnd')
      },
    }
  }

  public compose(): BizKorComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      initGlobalKeys(args: MethodArgs<'initGlobalKeys()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.initGlobalKeys(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      createAssetTest(args: MethodArgs<'createAssetTest()uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.createAssetTest(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      optIntoAsset(args: MethodArgs<'optIntoAsset(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.optIntoAsset(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      startAssetSell(args: MethodArgs<'startAssetSell(uint64,uint64,axfer)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.startAssetSell(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      continueAssetSell(args: MethodArgs<'continueAssetSell(axfer)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.continueAssetSell(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      buyAsset(args: MethodArgs<'buyAsset(pay)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.buyAsset(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      get delete() {
        const $this = this
        return {
          deleteApplication(args: MethodArgs<'deleteApplication()void'>, params?: AppClientComposeCallCoreParams) {
            promiseChain = promiseChain.then(() => client.delete.deleteApplication(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
            resultMappers.push(undefined)
            return $this
          },
        }
      },
      clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await atc.simulate(client.algod, new modelsv2.SimulateRequest({ txnGroups: [], ...options }))
        return {
          ...result,
          returns: result.methodResults?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      },
      async execute(sendParams?: AppClientComposeExecuteParams) {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as BizKorComposer
  }
}
export type BizKorComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the initGlobalKeys()void ABI method.
   *
   * Init the values of global keys
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  initGlobalKeys(args: MethodArgs<'initGlobalKeys()void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): BizKorComposer<[...TReturns, MethodReturn<'initGlobalKeys()void'>]>

  /**
   * Calls the createAssetTest()uint64 ABI method.
   *
   * For test only, create an asset
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createAssetTest(args: MethodArgs<'createAssetTest()uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): BizKorComposer<[...TReturns, MethodReturn<'createAssetTest()uint64'>]>

  /**
   * Calls the optIntoAsset(uint64)void ABI method.
   *
   * Opt in to an asset for the app account
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  optIntoAsset(args: MethodArgs<'optIntoAsset(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): BizKorComposer<[...TReturns, MethodReturn<'optIntoAsset(uint64)void'>]>

  /**
   * Calls the startAssetSell(uint64,uint64,axfer)void ABI method.
   *
   * Start asset selling period
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  startAssetSell(args: MethodArgs<'startAssetSell(uint64,uint64,axfer)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): BizKorComposer<[...TReturns, MethodReturn<'startAssetSell(uint64,uint64,axfer)void'>]>

  /**
   * Calls the continueAssetSell(axfer)void ABI method.
   *
   * Send assets clawed back to app account
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  continueAssetSell(args: MethodArgs<'continueAssetSell(axfer)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): BizKorComposer<[...TReturns, MethodReturn<'continueAssetSell(axfer)void'>]>

  /**
   * Calls the buyAsset(pay)void ABI method.
   *
   * Buy 1 piece of the asset
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  buyAsset(args: MethodArgs<'buyAsset(pay)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): BizKorComposer<[...TReturns, MethodReturn<'buyAsset(pay)void'>]>

  /**
   * Gets available delete methods
   */
  readonly delete: {
    /**
     * Deletes an existing instance of the BizKor smart contract using the deleteApplication()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    deleteApplication(args: MethodArgs<'deleteApplication()void'>, params?: AppClientComposeCallCoreParams): BizKorComposer<[...TReturns, MethodReturn<'deleteApplication()void'>]>
  }

  /**
   * Makes a clear_state call to an existing instance of the BizKor smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs): BizKorComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): BizKorComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(options?: SimulateOptions): Promise<BizKorComposerSimulateResult<TReturns>>
  /**
   * Executes the transaction group and returns the results
   */
  execute(sendParams?: AppClientComposeExecuteParams): Promise<BizKorComposerResults<TReturns>>
}
export type SimulateOptions = Omit<ConstructorParameters<typeof modelsv2.SimulateRequest>[0], 'txnGroups'>
export type BizKorComposerSimulateResult<TReturns extends [...any[]]> = {
  returns: TReturns
  methodResults: ABIResult[]
  simulateResponse: modelsv2.SimulateResponse
}
export type BizKorComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
